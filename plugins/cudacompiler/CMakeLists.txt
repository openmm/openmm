#---------------------------------------------------
# OpenMM CUDA runtime compiler
#
# Creates OpenMMCudaCompiler library.
#
# Windows:
#   OpenMMCudaCompiler.dll
#   OpenMMCudaCompiler.lib
# Unix:
#   libOpenMMCudaCompiler.so
#----------------------------------------------------

# The source is organized into subdirectories, but we handle them all from
# this CMakeLists file rather than letting CMake visit them as SUBDIRS.
SET(OPENMM_SOURCE_SUBDIRS .)

# These are all the places to search for header files which are
# to be part of the API.
SET(API_INCLUDE_DIRS) # start empty
FOREACH(subdir ${OPENMM_SOURCE_SUBDIRS})
    # append
    SET(API_INCLUDE_DIRS ${API_INCLUDE_DIRS}
                         ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/include
                         ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/include/internal)
ENDFOREACH(subdir)

# We'll need both *relative* path names, starting with their API_INCLUDE_DIRS,
# and absolute pathnames.
SET(API_REL_INCLUDE_FILES)   # start these out empty
SET(API_ABS_INCLUDE_FILES)

FOREACH(dir ${API_INCLUDE_DIRS})
    FILE(GLOB fullpaths ${dir}/*.h)	# returns full pathnames
    SET(API_ABS_INCLUDE_FILES ${API_ABS_INCLUDE_FILES} ${fullpaths})

    FOREACH(pathname ${fullpaths})
        GET_FILENAME_COMPONENT(filename ${pathname} NAME)
        SET(API_REL_INCLUDE_FILES ${API_REL_INCLUDE_FILES} ${dir}/${filename})
    ENDFOREACH(pathname)
ENDFOREACH(dir)

# collect up source files
SET(SOURCE_FILES) # empty
SET(SOURCE_INCLUDE_FILES)

FOREACH(subdir ${OPENMM_SOURCE_SUBDIRS})
    FILE(GLOB_RECURSE src_files  ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/src/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/src/*.c)
    FILE(GLOB incl_files ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/src/*.h)
    SET(SOURCE_FILES         ${SOURCE_FILES}         ${src_files})   #append
    SET(SOURCE_INCLUDE_FILES ${SOURCE_INCLUDE_FILES} ${incl_files})
    INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/include)
ENDFOREACH(subdir)

INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_SOURCE_DIR}/platforms/cuda/include)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_SOURCE_DIR}/platforms/common/include)
INCLUDE_DIRECTORIES(${CUDA_TOOLKIT_INCLUDE})

INCLUDE(ParseCudaToolkit)
SET(BUILD_TESTS_FOR_TOOLKIT ${OPENMM_BUILD_CUDA_TESTS})
FOREACH(CUDA_TOOLKIT_ROOT IN LISTS CUDA_TOOLKIT_ROOTS)
    parse_cuda_toolkit("${CUDA_TOOLKIT_ROOT}" CURRRENT_CUDA_VERSION CURRENT_CUDA_INCLUDE_DIR CURRENT_LIBCUDA CURRENT_NVRTC CURRENT_CUFFT)
    SET(OPENMMCUDACOMPILER_LIBRARY_NAME OpenMMCudaCompiler${CURRRENT_CUDA_VERSION})
    SET(SHARED_TARGET ${OPENMMCUDACOMPILER_LIBRARY_NAME})
    SET(STATIC_TARGET ${OPENMMCUDACOMPILER_LIBRARY_NAME}_static)

    # Build the shared plugin library.

    IF (OPENMM_BUILD_SHARED_LIB)
        ADD_LIBRARY(${SHARED_TARGET} SHARED ${SOURCE_FILES} ${SOURCE_INCLUDE_FILES} ${API_INCLUDE_FILES})

        TARGET_INCLUDE_DIRECTORIES(${SHARED_TARGET} PRIVATE ${CURRENT_CUDA_INCLUDE_DIR})
        TARGET_LINK_LIBRARIES(${SHARED_TARGET} ${OPENMM_LIBRARY_NAME} ${CURRENT_NVRTC})
        TARGET_LINK_LIBRARIES(${SHARED_TARGET} ${OPENMM_LIBRARY_NAME}CUDA${CURRRENT_CUDA_VERSION})
        SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES COMPILE_FLAGS "${EXTRA_COMPILE_FLAGS} -DOPENMM_CUDACOMPILER_BUILDING_SHARED_LIBRARY")
        SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES LINK_FLAGS "${EXTRA_LINK_FLAGS}")

        INSTALL_TARGETS(/lib/plugins RUNTIME_DIRECTORY /lib/plugins ${SHARED_TARGET})
    ENDIF (OPENMM_BUILD_SHARED_LIB)

    # Build the static plugin library.

    IF(OPENMM_BUILD_STATIC_LIB)
        ADD_LIBRARY(${STATIC_TARGET} STATIC ${SOURCE_FILES} ${SOURCE_INCLUDE_FILES} ${API_INCLUDE_FILES})

        TARGET_INCLUDE_DIRECTORIES(${STATIC_TARGET} PRIVATE ${CURRENT_CUDA_INCLUDE_DIR})
        TARGET_LINK_LIBRARIES(${STATIC_TARGET} ${OPENMM_LIBRARY_NAME}_static ${CURRENT_NVRTC})
        TARGET_LINK_LIBRARIES(${STATIC_TARGET} ${OPENMM_LIBRARY_NAME}CUDA${CURRRENT_CUDA_VERSION})
        SET_TARGET_PROPERTIES(${STATIC_TARGET} PROPERTIES COMPILE_FLAGS "${EXTRA_COMPILE_FLAGS} -DOPENMM_CUDACOMPILER_BUILDING_STATIC_LIBRARY")
        SET_TARGET_PROPERTIES(${STATIC_TARGET} PROPERTIES LINK_FLAGS "${EXTRA_LINK_FLAGS}")

        INSTALL_TARGETS(/lib/plugins RUNTIME_DIRECTORY /lib/plugins ${STATIC_TARGET})
    ENDIF(OPENMM_BUILD_STATIC_LIB)

    INSTALL(TARGETS ${SHARED_TARGET} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/plugins)

    if(BUILD_TESTS_FOR_TOOLKIT)
        SUBDIRS(tests)
        SET(BUILD_TESTS_FOR_TOOLKIT OFF) # Only build tests for first toolkit
    endif()
ENDFOREACH()
